interface Window {
	readonly Twitch: { readonly ext: TwitchExt };
}

/**
 * The Twitch extensions JavaScript Helper.
 *
 * @see {@link https://dev.twitch.tv/docs/extensions/reference#javascript-helper}
 */
interface TwitchExt {
	/**
	 * This encodes the Helper version in 1.1.1 (semantic versioning) format.
	 */
	version: string;

	/**
	 * This encodes the environment. For external users, this is always production.
	 */
	environment: "production";

	/**
	 * This function binds the callback to the initial values and changes to the authorization data.
	 *
	 * @param authCallback This callback is fired each time the JWT is refreshed.
	 * @see {@link https://dev.twitch.tv/docs/extensions/reference#onauthorized-functionauthcallback}
	 */
	onAuthorized(authCallback: (auth: TwitchExtAuthorized) => void): void;

	/**
	 * This function binds the callback to any internal error.
	 *
	 * @param errorCallback This callback is fired if any errors are generated by the extension helper.
	 * @see {@link https://dev.twitch.tv/docs/extensions/reference#onerror-functionerrorcallback}
	 */
	onError(errorCallback: (errorValue: any) => void): void;

	/**
	 * This function binds the callback to the initial values and changes to the context.
	 *
	 * @param contextCallback This callback is fired when the context of an extension is fired.
	 * @see {@link https://dev.twitch.tv/docs/extensions/reference#oncontext-functioncontextcallback}
	 */
	onContext(
		contextCallback: (
			context: TwitchExtContext,
			changed: keyof TwitchExtContext,
		) => void,
	): void;

	/**
	 * This function can be called by the front end to send directly to PubSub.
	 *
	 * @param target Target topic. Often this is "broadcast" but it might be "whisper-<userId>".
	 * @param contentType type of the serialized message; for example, "application/json".
	 * @param message Either an object that will be automatically serialized as JSON or a string.
	 * @see {@link https://dev.twitch.tv/docs/extensions/reference#send-functiontarget-contenttype-message}
	 */
	send(target: string, contentType: string, message: object | string): void;

	/**
	 * This function binds the callback to listen to the target topic.
	 *
	 * @param target Target topic. Often this is "broadcast" but it might be "whisper-<userId>".
	 * @param callback These fields correspond to the values in the send() message, except the message is always a string.
	 * @see {@link https://dev.twitch.tv/docs/extensions/reference#listen-functiontarget-callback}
	 */
	listen(
		target: string,
		callback: (target: string, contentType: string, message: string) => void,
	): void;

	/**
	 * This function unbinds the listen callback from the target.
	 *
	 * @param target Target topic. Often this is "broadcast" but it might be "whisper-<userId>".
	 * @param callback These fields correspond to the values in the send() message, except the message is always a string.
	 * @see {@link https://dev.twitch.tv/docs/extensions/reference#unlisten-functiontarget-callback}
	 */
	unlisten(
		target: string,
		callback: (target: string, contentType: string, message: string) => void,
	): void;
}

/**
 * The result object as passed to the onAuthorized callback.
 *
 * @see TwitchExt.onAuthorized
 */
interface TwitchExtAuthorized {
	/**
	 * Channel ID of the page where the extension is iframe embedded.
	 */
	channelId: string;

	/**
	 * Client ID of the extension.
	 */
	clientId: string;

	/**
	 * JWT that should be passed to any EBS call for authentication.
	 */
	token: string;

	/**
	 * Opaque user ID.
	 */
	userId: string;
}

/**
 * The result object as passed to the onContext callback.
 *
 * @see TwitchExt.onContext
 */
interface TwitchExtContext {
	/**
	 * The mode the extension is currently run in.
	 */
	mode: "viewer" | "dashboard" | "config";

	/**
	 * Bitrate of the broadcast.
	 */
	bitrate: number;

	/**
	 * Buffer size of the broadcast.
	 */
	bufferSize: number;

	/**
	 * Display size of the player.
	 */
	displayResolution: string;

	/**
	 * Game being broadcast.
	 */
	game: string;

	/**
	 * Number of seconds of latency between the broadcaster and viewer.
	 */
	hlsLatencyBroadcaster: number;

	/**
	 * If true, the viewer is watching in fullscreen mode.
	 */
	isFullScreen: boolean;

	/**
	 * If true, the viewer has paused the stream.
	 */
	isPaused: boolean;

	/**
	 * If true, the viewer is watching in theater mode.
	 */
	isTheatreMode: boolean;

	/**
	 * Language of the broadcast (e.g., "en").
	 */
	language: string;

	/**
	 * Resolution of the broadcast.
	 */
	videoResolution: string;
}
